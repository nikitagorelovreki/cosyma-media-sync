// –¢–µ—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º customFields —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ WEEEK API
const axios = require('axios');
require('dotenv').config();

const WEEEK_API_TOKEN = process.env.WEEEK_API_TOKEN;
const PROJECT_ID = process.env.WEEEK_SPACE_OR_PROJECT_ID;

if (!WEEEK_API_TOKEN || !PROJECT_ID) {
  console.error('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã WEEEK_API_TOKEN –∏–ª–∏ WEEEK_SPACE_OR_PROJECT_ID –≤ .env');
  process.exit(1);
}

const weeekApi = axios.create({
  baseURL: 'https://api.weeek.net/public/v1',
  headers: {
    'Authorization': `Bearer ${WEEEK_API_TOKEN}`,
    'Content-Type': 'application/json'
  }
});

// ID –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π
const CUSTOM_FIELDS = {
  MEDIA_TYPE: '9faeb00e-bce5-4ccb-accf-d2af3bff65da',    // Media Type (select)
  LINK: '9faeb02c-4521-480f-aeaf-54e2a234b2ae',          // Link (link)
  CREATION_DATE: '9faeb096-8a8d-401c-95c9-0a38e6c87a80'  // Creation Date (datetime)
};

async function testCorrectFormat() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç customFields —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ WEEEK API');
    
    // –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: customFields –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º —Å –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
    const payload = {
      title: '–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ customFields',
      description: '–¢–µ—Å—Ç–∏—Ä—É—é —Ñ–æ—Ä–º–∞—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ WEEEK API',
      projectId: PROJECT_ID,
      customFields: {
        [CUSTOM_FIELDS.MEDIA_TYPE]: '9faebbd6-83ed-4722-a2f4-7e8726825adc',    // select –ø–æ–ª–µ - ID –æ–ø—Ü–∏–∏ "–§–æ—Ç–æ"
        [CUSTOM_FIELDS.LINK]: 'https://example.com/test',                      // link –ø–æ–ª–µ
        [CUSTOM_FIELDS.CREATION_DATE]: '2024-04-24T00:00:00Z'                 // datetime –ø–æ–ª–µ –≤ ISO 8601
      }
    };
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é payload:');
    console.log(JSON.stringify(payload, null, 2));
    
    const response = await weeekApi.post('/tm/tasks', payload);
    
    console.log('\n‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üÜî ID –∑–∞–¥–∞—á–∏:', response.data.task.id);
    
    console.log('\nüìã –û—Ç–≤–µ—Ç —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–æ–ª—è–º–∏:');
    console.log(JSON.stringify(response.data.task.customFields, null, 2));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–∏–ª–∏—Å—å –ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
    const hasValues = response.data.task.customFields.some(field => field.value !== null);
    console.log(`\nüéØ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã: ${hasValues ? '–î–ê' : '–ù–ï–¢'}`);
    
    if (hasValues) {
      console.log('üéâ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π —Ñ–æ—Ä–º–∞—Ç!');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è
      response.data.task.customFields.forEach(field => {
        if (field.value !== null) {
          console.log(`  ‚úÖ ${field.name || field.id}: ${field.value}`);
        } else {
          console.log(`  ‚ùå ${field.name || field.id}: –ø—É—Å—Ç–æ`);
        }
      });
    } else {
      console.log('üòû –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏—Å—å');
      console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω—ã –¥—Ä—É–≥–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç');
    }
    
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
    return null;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testCorrectFormat().catch(console.error); 