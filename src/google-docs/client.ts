import { google } from 'googleapis';
import { GoogleDocsConfig, SpreadsheetRow, GoogleDocsExportResult } from '../types';

export class GoogleDocsClient {
  private auth: any;
  private sheets: any;
  private config: GoogleDocsConfig;

  constructor(config: GoogleDocsConfig) {
    this.config = config;
    this.initializeAuth();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é Google
   */
  private initializeAuth(): void {
    try {
      if (!this.config.credentialsPath) {
        throw new Error('GOOGLE_CREDENTIALS_PATH –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
      const fs = require('fs');
      const credentials = JSON.parse(fs.readFileSync(this.config.credentialsPath, 'utf8'));
      
      this.auth = new google.auth.GoogleAuth({
        credentials,
        scopes: ['https://www.googleapis.com/auth/spreadsheets']
      });

      this.sheets = google.sheets({ version: 'v4', auth: this.auth });
      
      console.log('‚úÖ Google Sheets API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets API:', error);
      throw error;
    }
  }

  /**
   * –ß–∏—Ç–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
   */
  private async readExistingData(sheetName: string): Promise<{ existingLinks: Set<string>, lastRowIndex: number }> {
    try {
      const response = await this.sheets.spreadsheets.values.get({
        spreadsheetId: this.config.spreadsheetId,
        range: `${sheetName}!A:E`
      });

      const values = response.data.values || [];
      const existingLinks = new Set<string>();
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
      for (let i = 1; i < values.length; i++) {
        const row = values[i];
        if (row && row.length > 1 && row[1]) { // row[1] - –∫–æ–ª–æ–Ω–∫–∞ "–°—Å—ã–ª–∫–∞"
          existingLinks.add(row[1]);
        }
      }

      return {
        existingLinks,
        lastRowIndex: values.length
      };
    } catch (error) {
      console.warn('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:', error);
      return {
        existingLinks: new Set<string>(),
        lastRowIndex: 1 // –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
      };
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
   */
  async exportToSpreadsheet(
    rows: SpreadsheetRow[], 
    sheetName: string = 'Sheet1'
  ): Promise<GoogleDocsExportResult> {
    try {
      if (!this.config.spreadsheetId) {
        throw new Error('GOOGLE_SPREADSHEET_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
      }

      console.log(`üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é ${rows.length} —Å—Ç—Ä–æ–∫ –≤ Google Sheets...`);

      // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
      const { existingLinks, lastRowIndex } = await this.readExistingData(sheetName);
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${existingLinks.size} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Å—ã–ª–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ`);

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã (–ø–æ —Å—Å—ã–ª–∫–µ)
      const newRows = rows.filter(row => !existingLinks.has(row.link));
      console.log(`üÜï –ù–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ${newRows.length}/${rows.length}`);

      if (newRows.length === 0) {
        console.log('‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ');
        return {
          success: true,
          spreadsheetUrl: `https://docs.google.com/spreadsheets/d/${this.config.spreadsheetId}`,
          rowsExported: 0
        };
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const data = newRows.map(row => [
        row.fileName,
        row.link,
        row.mediaType,
        row.creationDate,
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ù–û–í–´–ô API Mail.ru –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–∞—Ç—é—Ä!
        row.thumbnailUrl ? `=IMAGE("${row.thumbnailUrl}",1)` : '–ú–∏–Ω–∏–∞—Ç—é—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
      ]);

      // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      if (lastRowIndex === 1) {
        const headers = ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–°—Å—ã–ª–∫–∞', '–¢–∏–ø –º–µ–¥–∏–∞', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'];
        data.unshift(headers);
        console.log('üìù –î–æ–±–∞–≤–ª—è—é –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã');
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã
      const response = await this.sheets.spreadsheets.values.update({
        spreadsheetId: this.config.spreadsheetId,
        range: `${sheetName}!A${lastRowIndex}`,
        valueInputOption: 'USER_ENTERED', // –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É–ª—ã
        requestBody: {
          values: data
        }
      });

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç, —Ñ–æ–Ω)
      await this.formatHeaders(sheetName, 5); // 5 –∫–æ–ª–æ–Ω–æ–∫

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ–Ω—è–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
      await this.autoResizeColumns(sheetName, 5); // 5 –∫–æ–ª–æ–Ω–æ–∫

      const spreadsheetUrl = `https://docs.google.com/spreadsheets/d/${this.config.spreadsheetId}`;
      
      console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${newRows.length} –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–æ`);
      console.log(`üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É: ${spreadsheetUrl}`);

      return {
        success: true,
        spreadsheetUrl,
        rowsExported: newRows.length
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Google Sheets:', error);
      return {
        success: false,
        rowsExported: 0,
        errors: [error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞']
      };
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
   */
  private async formatHeaders(sheetName: string, columnCount: number): Promise<void> {
    try {
      const requests = [
        {
          repeatCell: {
            range: {
              sheetId: await this.getSheetId(sheetName),
              startRowIndex: 0,
              endRowIndex: 1,
              startColumnIndex: 0,
              endColumnIndex: columnCount
            },
            cell: {
              userEnteredFormat: {
                backgroundColor: { red: 0.2, green: 0.6, blue: 0.9 },
                textFormat: { bold: true, foregroundColor: { red: 1, green: 1, blue: 1 } }
              }
            },
            fields: 'userEnteredFormat(backgroundColor,textFormat)'
          }
        }
      ];

      await this.sheets.spreadsheets.batchUpdate({
        spreadsheetId: this.config.spreadsheetId,
        requestBody: { requests }
      });

      console.log('‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      console.warn('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏:', error);
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ–Ω—è–µ—Ç —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
   */
  private async autoResizeColumns(sheetName: string, columnCount: number): Promise<void> {
    try {
      const requests = [];
      
      for (let i = 0; i < columnCount; i++) {
        // –î–ª—è –∫–æ–ª–æ–Ω–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (–ø–æ—Å–ª–µ–¥–Ω—è—è) —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É
        if (i === columnCount - 1) {
          requests.push({
            updateDimensionProperties: {
              range: {
                sheetId: await this.getSheetId(sheetName),
                dimension: 'COLUMNS',
                startIndex: i,
                endIndex: i + 1
              },
              properties: {
                pixelSize: 150 // –®–∏—Ä–∏–Ω–∞ 150 –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –º–∏–Ω–∏–∞—Ç—é—Ä
              },
              fields: 'pixelSize'
            }
          });
        } else {
          // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ–Ω—è–µ–º —à–∏—Ä–∏–Ω—É
          requests.push({
            autoResizeDimensions: {
              dimensions: {
                sheetId: await this.getSheetId(sheetName),
                dimension: 'COLUMNS',
                startIndex: i,
                endIndex: i + 1
              }
            }
          });
        }
      }

      await this.sheets.spreadsheets.batchUpdate({
        spreadsheetId: this.config.spreadsheetId,
        requestBody: { requests }
      });

      console.log('‚úÖ –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ (–ø–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞ - 150px –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)');
    } catch (error) {
      console.warn('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç ID –ª–∏—Å—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
   */
  private async getSheetId(sheetName: string): Promise<number> {
    const response = await this.sheets.spreadsheets.get({
      spreadsheetId: this.config.spreadsheetId
    });

    const sheet = response.data.sheets.find((s: any) => s.properties.title === sheetName);
    if (!sheet) {
      throw new Error(`–õ–∏—Å—Ç "${sheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    return sheet.properties.sheetId;
  }

  /**
   * –í—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–ª–æ–Ω–∫—É —Ç–∞–±–ª–∏—Ü—ã
   */
  private async insertImages(rows: SpreadsheetRow[], sheetName: string, columnCount: number): Promise<void> {
    try {
      const sheetId = await this.getSheetId(sheetName);
      const requests = [];
      
      // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
      for (let i = 0; i < rows.length; i++) {
        const row = rows[i];
        if (row.thumbnailUrl) {
          requests.push({
            insertImage: {
              url: row.thumbnailUrl,
              sheetId: sheetId,
              location: {
                index: columnCount - 1, // –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞
                rowIndex: i + 1 // +1 –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
              },
              objectId: `image_${i}`,
              width: 100,
              height: 100
            }
          });
        }
      }

      if (requests.length > 0) {
        await this.sheets.spreadsheets.batchUpdate({
          spreadsheetId: this.config.spreadsheetId,
          requestBody: { requests }
        });
        console.log(`‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${requests.length}`);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    }
  }
} 