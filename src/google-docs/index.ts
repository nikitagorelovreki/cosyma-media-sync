#!/usr/bin/env node

import { ConfigLoader } from '../config';
import { GoogleDocsClient } from './client';
import { GoogleDocsExporter } from './exporter';
import { MediaSync } from '../sync/media-sync';
import { MediaItemWithThumbnail } from '../types';

async function main() {
  try {
    console.log('üöÄ Media Sync - –≠–∫—Å–ø–æ—Ä—Ç –≤ Google Docs');
    console.log('=' .repeat(50));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const args = process.argv.slice(2);
    const isDryRun = args.includes('--dry-run') || args.includes('-d');
    
    if (isDryRun) {
      console.log('üîç –†–µ–∂–∏–º DRY-RUN –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    console.log('üìã –ó–∞–≥—Ä—É–∂–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...');
    const config = ConfigLoader.load();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ Google Docs
    if (!config.googleDocs?.enabled) {
      console.error('‚ùå Google Docs –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
      console.log('–î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:');
      console.log('GOOGLE_DOCS_ENABLED=true');
      console.log('GOOGLE_SPREADSHEET_ID=your_spreadsheet_id');
      console.log('GOOGLE_CREDENTIALS_PATH=path/to/credentials.json');
      process.exit(1);
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Docs –∫–ª–∏–µ–Ω—Ç
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é Google Docs...');
    const googleDocsClient = new GoogleDocsClient(config.googleDocs);
    const exporter = new GoogleDocsExporter(googleDocsClient);
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
    const mediaSync = new MediaSync(config);
    
    // –ß–∏—Ç–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ stdin –∏–ª–∏ —Ñ–∞–π–ª–∞
    let inputLinks: string[] = [];
    
    if (process.stdin.isTTY) {
      // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
      console.log('\nüìù –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±–ª–∞—á–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É):');
      console.log('–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+D (Unix) –∏–ª–∏ Ctrl+Z (Windows)');
      
      const readline = require('readline');
      const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
      });
      
      inputLinks = await new Promise<string[]>((resolve) => {
        const links: string[] = [];
        rl.on('line', (line: string) => {
          const trimmed = line.trim();
          if (trimmed) {
            links.push(trimmed);
          }
        });
        rl.on('close', () => resolve(links));
      });
      
    } else {
      // –†–µ–∂–∏–º pipe –∏–∑ —Ñ–∞–π–ª–∞
      const fs = require('fs');
      const input = fs.readFileSync(0, 'utf-8');
      // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫ –ò –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
      inputLinks = input
        .split(/[\n\s]+/) // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫ –∏ –ø—Ä–æ–±–µ–ª–∞–º
        .map((line: string) => line.trim())
        .filter((line: string) => line.length > 0);
    }
    
    if (inputLinks.length === 0) {
      console.log('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
      console.log('  npm run google-docs -- --dry-run                    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å dry-run');
      console.log('  echo "—Å—Å—ã–ª–∫–∞1\\n—Å—Å—ã–ª–∫–∞2" | npm run google-docs      # –†–µ–∂–∏–º pipe');
      console.log('  npm run google-docs < links.txt                     # –ß—Ç–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞');
      process.exit(1);
    }
    
    console.log(`\nüîó –ù–∞–π–¥–µ–Ω–æ ${inputLinks.length} —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
    
    if (isDryRun) {
      console.log('‚ö†Ô∏è  –†–µ–∂–∏–º DRY-RUN - —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω');
      console.log('üìä –ü–æ–∫–∞–∑—ã–≤–∞—é –ø–ª–∞–Ω —ç–∫—Å–ø–æ—Ä—Ç–∞...');
      
      // –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –¥–ª—è dry-run
      const mediaItems = await mediaSync.collectMediaItems(inputLinks);
      const enrichedItems = mediaItems as MediaItemWithThumbnail[];
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω —ç–∫—Å–ø–æ—Ä—Ç–∞
      exporter.createExportSummary(enrichedItems);
      
      console.log('\nüí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ —É–±–µ—Ä–∏—Ç–µ —Ñ–ª–∞–≥ --dry-run');
      
    } else {
      // –†–µ–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
      console.log('üöÄ –ù–∞—á–∏–Ω–∞—é —ç–∫—Å–ø–æ—Ä—Ç –≤ Google Docs...');
      
      // –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
      const mediaItems = await mediaSync.collectMediaItems(inputLinks);
      const enrichedItems = mediaItems as MediaItemWithThumbnail[];
      
      // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ Google Docs
      const result = await exporter.exportMediaItems(enrichedItems);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
      exporter.createExportSummary(enrichedItems);
      
      if (result.success) {
        console.log('\nüéâ –≠–ö–°–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');
        console.log('=' .repeat(40));
        console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${result.rowsExported}`);
        console.log(`üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É: ${result.spreadsheetUrl}`);
      } else {
        console.log('\n‚ùå –≠–ö–°–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–ê–ú–ò');
        console.log('=' .repeat(40));
        console.log(`‚ùå –û—à–∏–±–∫–∏: ${result.errors?.length || 0}`);
        if (result.errors) {
          result.errors.forEach((error, index) => {
            console.log(`${index + 1}. ${error}`);
          });
        }
        process.exit(1);
      }
    }
    
    console.log('\nüéâ –ì–æ—Ç–æ–≤–æ!');
    
  } catch (error) {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    
    if (error instanceof Error && error.stack) {
      console.error('\n–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:');
      console.error(error.stack);
    }
    
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
} 