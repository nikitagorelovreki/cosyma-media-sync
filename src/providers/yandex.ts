import axios, { AxiosInstance } from 'axios';
import { MediaItem, Provider } from '../types';
import { MediaFilter } from '../filters/media';

interface YandexResource {
  name: string;
  path: string;
  type: 'file' | 'dir';
  mime_type?: string;
  created?: string;
  modified?: string;
  size?: number;
  public_url?: string;
  preview?: string; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ preview
}

interface YandexResponse {
  public_key: string;
  name: string;
  created?: string;
  modified?: string;
  path: string;
  type: 'file' | 'dir';
  mime_type?: string;
  size?: number;
  _embedded?: {
    items: YandexResource[];
    limit: number;
    offset: number;
    total: number;
  };
}

export class YandexProvider {
  private readonly api: AxiosInstance;
  private readonly baseUrl = 'https://cloud-api.yandex.net/v1/disk';

  constructor() {
    this.api = axios.create({
      timeout: 30000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'application/json, text/plain, */*',
        'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
        'Accept-Encoding': 'gzip, deflate, br',
        'DNT': '1',
        'Connection': 'keep-alive',
        'Referer': 'https://disk.yandex.ru/',
        'Origin': 'https://disk.yandex.ru',
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'cross-site',
        'Cache-Control': 'no-cache',
        'Authorization': 'OAuth y0__xDu18eLqveAAhif5Tkgyd3emBQRgv1JG_NTosrUIWv7aM9BiKZ4Tw'
      }
    });
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ ID –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL
   */
      private extractPublicKey(url: string): string {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π URL –∫–∞–∫ public_key
      // https://disk.360.yandex.ru/d/xNv4Njt4wmH7xQ -> https://disk.360.yandex.ru/d/xNv4Njt4wmH7xQ
      return url;
    }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏
   */
  async listMediaItems(publicUrl: string, provider: Provider): Promise<MediaItem[]> {
    const items: MediaItem[] = [];
    
    try {
      if (publicUrl.includes('/i/')) {
        // –û–¥–∏–Ω–æ—á–Ω—ã–π —Ñ–∞–π–ª
        const item = await this.getSingleFile(publicUrl, provider);
        if (item) {
          items.push(item);
        }
      } else if (publicUrl.includes('/d/')) {
        // –ü–∞–ø–∫–∞ - —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        await this.traverseFolder(publicUrl, provider, items);
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∏–∑ ${publicUrl}:`, error);
      throw error;
    }
    
    return items;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–¥–∏–Ω–æ—á–Ω–æ–º —Ñ–∞–π–ª–µ
   */
  private async getSingleFile(publicUrl: string, provider: Provider): Promise<MediaItem | null> {
    try {
      const response = await this.api.get<YandexResponse>(
        `${this.baseUrl}/public/resources`,
        {
          params: {
            public_key: publicUrl
          }
        }
      );

      const resource = response.data;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª
      if (resource.type !== 'file') {
        return null;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª
      if (!MediaFilter.isMediaFile(resource.name, resource.mime_type)) {
        return null;
      }

      return this.mapToMediaItem(resource, publicUrl, provider);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${publicUrl}:`, error);
      throw error;
    }
  }

  /**
   * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏—Ç –ø–∞–ø–∫—É –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
   */
  private async traverseFolder(
    publicUrl: string, 
    provider: Provider, 
    items: MediaItem[],
    path: string = '',
    offset: number = 0,
    limit: number = 200
  ): Promise<void> {
    try {
      // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è API —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      const params: any = {
        public_key: this.extractPublicKey(publicUrl), // –¢–æ–ª—å–∫–æ ID –∏–∑ URL
        limit,
        offset
      };
      
      // –ö–æ–¥–∏—Ä—É–µ–º –ø—É—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –Ω–µ –ø—É—Å—Ç–æ–π
      if (path && path.trim()) {
        // Axios –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–¥–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–æ—ç—Ç–æ–º—É –ù–ï –∫–æ–¥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
        params.path = path;
        console.log(`üîó –ó–∞–ø—Ä–æ—Å –∫ API: public_key="${this.extractPublicKey(publicUrl)}" path="${path}"`);
      } else {
        console.log(`üîó –ó–∞–ø—Ä–æ—Å –∫ API: public_key="${this.extractPublicKey(publicUrl)}" (–∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞)`);
      }

      const response = await this.api.get<YandexResponse>(
        `${this.baseUrl}/public/resources`,
        { params }
      );

      console.log(`üîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API:`, JSON.stringify(response.data, null, 2));

      const embedded = response.data._embedded;
      if (!embedded || !embedded.items) {
        console.log(`üìã –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ API –¥–ª—è path="${path}"`);
        return;
      }
      
      console.log(`üìã API –≤–µ—Ä–Ω—É–ª ${embedded.items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è path="${path}"`);
      console.log(`üìã –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${embedded.total || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      for (const item of embedded.items) {
        if (item.type === 'file') {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª
          if (MediaFilter.isMediaFile(item.name, item.mime_type)) {
            const mediaItem = this.mapToMediaItem(item, publicUrl, provider, path);
            items.push(mediaItem);
          }
        } else if (item.type === 'dir') {
          // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –ø–æ–¥–ø–∞–ø–∫—É —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API
          const subPath = path ? `${path}/${item.name}` : `/${item.name}`;
          console.log(`üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∞–ø–∫—É: ${item.name} -> path: ${subPath}`);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
          await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));
          
          // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –ø–æ–¥–ø–∞–ø–∫—É
          await this.traverseFolder(publicUrl, provider, items, subPath, 0, limit);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      if (embedded.items.length === limit && offset + limit < embedded.total) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 2000 + Math.random() * 3000));
        await this.traverseFolder(publicUrl, provider, items, path, offset + limit, limit);
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ö–æ–¥–µ –ø–∞–ø–∫–∏ ${path} –≤ ${publicUrl}:`, error);
      throw error;
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ—Å—É—Ä—Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –≤ MediaItem
   */
  private mapToMediaItem(
    resource: YandexResource, 
    publicUrl: string, 
    provider: Provider,
    folderPath?: string
  ): MediaItem {
    const pathKey = folderPath ? `${folderPath}/${resource.name}` : resource.name;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∑–∞–≥—Ä—É–∑–∫–∏
    let originalUploadedAt: string | undefined;
    if (resource.created) {
      originalUploadedAt = resource.created;
    } else if (resource.modified) {
      originalUploadedAt = resource.modified;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
    const mediaType = MediaFilter.detectMediaType(resource.name, resource.mime_type);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è Yandex.Disk
    let directUrl: string | undefined;
    let viewUrl: string | undefined;
    let previewUrl: string | undefined;
    
    if (resource.type === 'file') {
      // –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º public_url –∏–∑ API –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º)
      if (resource.public_url) {
        viewUrl = resource.public_url;
      } else {
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏
        const rootFolder = publicUrl.split('/d/')[0] + '/d/' + publicUrl.split('/d/')[1];
        viewUrl = `${rootFolder}/${encodeURIComponent(pathKey)}`;
      }
      
      // –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ API
      const encodedPath = encodeURIComponent(pathKey);
      const publicKey = this.extractPublicKey(publicUrl);
      directUrl = `${this.baseUrl}/public/resources/download?public_key=${encodeURIComponent(publicKey)}&path=${encodedPath}`;
      
      // –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ –∏–∑ API (–µ—Å–ª–∏ –µ—Å—Ç—å)
      if (resource.preview) {
        previewUrl = resource.preview;
      }
    }

    return {
      provider,
      sourcePublicUrl: publicUrl,
      directUrl: viewUrl || directUrl, // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å—Å—ã–ª–∫–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
      pathKey,
      fileName: resource.name,
      mediaType,
      originalUploadedAt,
      sizeBytes: resource.size,
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã
      previewUrl
    };
  }
} 