import axios, { AxiosInstance } from 'axios';
import { MediaItem, Provider } from '../types';
import { MediaFilter } from '../filters/media';

interface MailruFile {
  name: string;
  size: number;
  type: 'file' | 'folder';
  weblink?: string;
  path?: string;
  mtime?: string;
}

interface MailruResponse {
  body: {
    list: MailruFile[];
    count: number;
    limit: number;
    offset: number;
  };
  status: number;
}

export class MailruProvider {
  private readonly api: AxiosInstance;
  private readonly baseUrl = 'https://cloud.mail.ru/api/v2';

  constructor() {
    this.api = axios.create({
      timeout: 30000,
      headers: {
        'User-Agent': 'MediaSync/1.0',
        'Referer': 'https://cloud.mail.ru/'
      }
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏
   */
  async listMediaItems(publicUrl: string, provider: Provider): Promise<MediaItem[]> {
    const items: MediaItem[] = [];
    
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º weblink –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏
      const weblink = this.extractWeblink(publicUrl);
      if (!weblink) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å weblink –∏–∑ URL: ${publicUrl}`);
      }

      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –ø–∞–ø–∫—É
      await this.traverseFolder(weblink, publicUrl, provider, items, '', 0, 500, new Set());
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∏–∑ ${publicUrl}:`, error);
      throw error;
    }
    
    return items;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç weblink –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏ Mail.ru
   */
  private extractWeblink(publicUrl: string): string | null {
    try {
      const url = new URL(publicUrl);
      const pathParts = url.pathname.split('/');
      
      // –ò—â–µ–º weblink –≤ –ø—É—Ç–∏
      for (let i = 0; i < pathParts.length; i++) {
        if (pathParts[i] === 'public' && i + 1 < pathParts.length) {
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –ø—É—Ç—å –ø–æ—Å–ª–µ public/ –∫–∞–∫ weblink
          return pathParts.slice(i + 1).join('/');
        }
      }
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –∏—â–µ–º –≤ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
      const weblink = url.searchParams.get('weblink');
      if (weblink) {
        return weblink;
      }
      
      return null;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ URL ${publicUrl}:`, error);
      return null;
    }
  }

  /**
   * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏—Ç –ø–∞–ø–∫—É –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
   */
  private async traverseFolder(
    weblink: string,
    publicUrl: string,
    provider: Provider,
    items: MediaItem[],
    path: string = '',
    offset: number = 0,
    limit: number = 500,
    visitedPaths: Set<string> = new Set()
  ): Promise<void> {
          try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏
        const currentPath = path || '/';
        if (visitedPaths.has(currentPath)) {
          console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É: ${currentPath}`);
          return;
        }
        visitedPaths.add(currentPath);
        
        console.log(`üîç –ó–∞–ø—Ä–æ—Å –∫ Mail.ru API: weblink=${weblink}, path=${path}`);
        
        const response = await this.api.get<MailruResponse>(
        `${this.baseUrl}/folder`,
        {
          params: {
            weblink,
            limit,
            offset,
            sort: 'name'
          }
        }
      );

      console.log(`üì° Mail.ru API –æ—Ç–≤–µ—Ç: —Å—Ç–∞—Ç—É—Å=${response.data.status}, –¥–∞–Ω–Ω—ã–µ=`, response.data);

      if (response.data.status !== 200) {
        throw new Error(`API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.data.status}: ${JSON.stringify(response.data)}`);
      }

      const body = response.data.body;
      if (!body || !body.list) {
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      for (const item of body.list) {
        if (item.type === 'file') {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª
          if (MediaFilter.isMediaFile(item.name)) {
            const mediaItem = this.mapToMediaItem(item, publicUrl, provider, path);
            items.push(mediaItem);
          }
        } else if (item.type === 'folder') {
          // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –ø–æ–¥–ø–∞–ø–∫—É
          // –î–ª—è –ø–æ–¥–ø–∞–ø–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º weblink –∏–∑ item, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
          const subWeblink = item.weblink || weblink;
          const subPath = item.path || (path ? `${path}/${item.name}` : item.name);
          console.log(`üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∞–ø–∫—É: ${item.name}, weblink: ${subWeblink}, –ø—É—Ç—å: ${subPath}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ü–∏–∫–ª–∏–ª–∏—Å—å –ª–∏ –º—ã
          if (visitedPaths.has(subPath)) {
            console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø–æ—Å–µ—â—ë–Ω–Ω—ã–π –ø—É—Ç—å: ${subPath}`);
            continue;
          }
          
          await this.traverseFolder(subWeblink, publicUrl, provider, items, subPath, 0, limit, visitedPaths);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      if (body.list.length === limit && offset + limit < body.count) {
        await this.traverseFolder(weblink, publicUrl, provider, items, path, offset + limit, limit, visitedPaths);
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ö–æ–¥–µ –ø–∞–ø–∫–∏ ${path} –≤ weblink ${weblink}:`, error);
      throw error;
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ñ–∞–π–ª Mail.ru –≤ MediaItem
   */
  private mapToMediaItem(
    file: MailruFile,
    publicUrl: string,
    provider: Provider,
    folderPath?: string
  ): MediaItem {
    const pathKey = folderPath ? `${folderPath}/${file.name}` : file.name;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∑–∞–≥—Ä—É–∑–∫–∏
    let originalUploadedAt: string | undefined;
    if (file.mtime) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ ISO —Å—Ç—Ä–æ–∫—É
      try {
        const timestamp = parseInt(file.mtime);
        if (!isNaN(timestamp)) {
          originalUploadedAt = new Date(timestamp * 1000).toISOString();
        }
      } catch (error) {
        console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å mtime ${file.mtime} –¥–ª—è —Ñ–∞–π–ª–∞ ${file.name}`);
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é (MIME –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ Mail.ru API)
    const mediaType = MediaFilter.detectMediaType(file.name);

    // –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
    let directUrl: string | undefined;
    if (file.type === 'file') {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –≤ Mail.ru Cloud
      // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: http://cloud.mail.ru/public/P1ZJ/WGntm7zig/–ø—É—Ç—å/–∫/—Ñ–∞–π–ª—É
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –∏–∑ publicUrl (—É–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ö–≤–æ—Å—Ç)
      const baseUrl = publicUrl.split('?')[0]; // –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ ?
      if (folderPath) {
        // –ï—Å–ª–∏ —Ñ–∞–π–ª –≤ –ø–æ–¥–ø–∞–ø–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
        const encodedFolderPath = encodeURIComponent(folderPath);
        const encodedFileName = encodeURIComponent(file.name);
        directUrl = `${baseUrl}/${encodedFolderPath}/${encodedFileName}`;
      } else {
        // –ï—Å–ª–∏ —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ
        const encodedFileName = encodeURIComponent(file.name);
        directUrl = `${baseUrl}/${encodedFileName}`;
      }
    }

    return {
      provider,
      sourcePublicUrl: publicUrl,
      directUrl,
      pathKey,
      fileName: file.name,
      mediaType,
      originalUploadedAt,
      sizeBytes: file.size
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API Mail.ru
   */
  async testConnection(weblink: string): Promise<boolean> {
    try {
      const response = await this.api.get<MailruResponse>(
        `${this.baseUrl}/folder`,
        {
          params: {
            weblink,
            limit: 1,
            offset: 0
          }
        }
      );
      
      return response.data.status === 200;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Mail.ru API:', error);
      return false;
    }
  }
} 