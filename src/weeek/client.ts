/**
 * ‚ö†Ô∏è  DEPRECATED: WEEEK Integration
 * 
 * This module is deprecated and will be removed in future versions.
 * The main functionality of this application is Google Sheets export.
 * 
 * WEEEK integration is kept for backward compatibility only.
 * Do not use for new projects.
 */

import axios, { AxiosInstance } from 'axios';
import { 
  WeeekCustomField, 
  WeeekTaskPayload, 
  WeeekTask, 
  Config 
} from '../types';

interface WeeekCustomFieldCreate {
  name: string;
  type: string;
  options?: Array<{ name: string }>;
}

interface WeeekCustomFieldResponse {
  id: string;
  name: string;
  type: string;
  options?: Array<{ id: string; name: string }>;
}

interface WeeekTaskResponse {
  id: string;
  title: string;
  description?: string;
  customFields?: Record<string, any>;
}

export class WeeekClient {
  private readonly api: AxiosInstance;
  private readonly config: Config;
  private existingLinksMap: Map<string, boolean> | null = null;

  constructor(config: Config) {
    this.config = config;
    this.api = axios.create({
      baseURL: 'https://api.weeek.net/public/v1',
      timeout: 30000,
      headers: {
        'Authorization': `Bearer ${config.weeekApiToken}`,
        'Content-Type': 'application/json',
        'User-Agent': 'MediaSync/1.0'
      }
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API WEEEK
   */
  async testConnection(): Promise<boolean> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API —á–µ—Ä–µ–∑ endpoint –∑–∞–¥–∞—á
      const response = await this.api.get('/tm/tasks');
      return response.status === 200;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å WEEEK API:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
   */
  async getCustomFields(): Promise<WeeekCustomField[]> {
    try {
      const response = await this.api.get('/custom-fields');
      
      if (response.data && Array.isArray(response.data)) {
        return response.data.map((field: WeeekCustomFieldResponse) => ({
          id: field.id,
          name: field.name,
          type: field.type,
          options: field.options
        }));
      }
      
      return [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π:', error);
      return [];
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ
   */
  async createCustomField(field: WeeekCustomFieldCreate): Promise<WeeekCustomField | null> {
    try {
      const response = await this.api.post(
        '/custom-fields',
        field
      );
      
      if (response.data) {
        return {
          id: response.data.id,
          name: response.data.name,
          type: response.data.type,
          options: response.data.options
        };
      }
      
      return null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ª—è:', error);
      return null;
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫ Link, Creation Date –∏ Media Type
   */
  async ensureCustomFields(): Promise<{
    sourceUrlId: string;
    originalDateId: string;
    mediaTypeId: string;
  }> {
    console.log('üîç –ò—Å–ø–æ–ª—å–∑—É—é —Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ ID –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π...');
    
    // –•–∞—Ä–¥–∫–æ–∂–∏–º ID –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ 16
    const result = {
      sourceUrlId: '9fafcb38-56c0-491a-9ca5-55b4afc8c8d5',      // Link
      originalDateId: '9fafcb85-de56-4479-ac61-44d20511d729',   // Creation Date
      mediaTypeId: '9fafcb44-238f-413f-b7a0-b9608bef253a'        // Media Type
    };
    
    console.log('üîß –í–æ–∑–≤—Ä–∞—â–∞—é ID –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π:', result);
    return result;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –≤ WEEEK
   */
  async createTask(payload: WeeekTaskPayload): Promise<WeeekTask | null> {
    try {
      console.log('üì• –ü–æ–ª—É—á–µ–Ω payload –æ—Ç TaskBuilder:', JSON.stringify(payload, null, 2));
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
      const apiPayload: any = {
        title: payload.title,
        description: payload.description
      };

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å - –≤ WEEEK —ç—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ Tags —Å –º—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç–æ–º
      if (payload.tags && payload.tags.length > 0) {
        // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        apiPayload.tags = payload.tags.join(', ');
        
        // –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –º–∞—Å—Å–∏–≤
        apiPayload.tagArray = payload.tags;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è WEEEK API
      if (payload.customFields && Object.keys(payload.customFields).length > 0) {
        // WEEEK API –æ–∂–∏–¥–∞–µ—Ç customFields –∫–∞–∫ –æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
        // –≥–¥–µ –∫–ª—é—á = ID –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ª—è, –∑–Ω–∞—á–µ–Ω–∏–µ = –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
        apiPayload.customFields = payload.customFields;
        
        console.log('üîß –û—Ç–ø—Ä–∞–≤–ª—è—é customFields –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–±—ä–µ–∫—Ç–∞:', payload.customFields);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
      if (payload.projectId) {
        apiPayload.projectId = payload.projectId;
      }

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ WEEEK API:', JSON.stringify(apiPayload, null, 2));
      const response = await this.api.post('/tm/tasks', apiPayload);
      
      if (response.data) {
        console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç WEEEK API:', JSON.stringify(response.data, null, 2));
        return {
          id: response.data.id,
          title: response.data.title,
          description: response.data.description,
          customFields: response.data.customFields
        };
      }
      
      return null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
      if (error && typeof error === 'object' && 'response' in error) {
        const axiosError = error as any;
        console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', JSON.stringify(axiosError.response?.data, null, 2));
      }
      throw error;
    }
  }

  /**
   * –ò—â–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é
   */
  async searchTasks(query: string): Promise<WeeekTask[]> {
    try {
      // WEEEK API –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
      // –ü–æ—ç—Ç–æ–º—É –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      const response = await this.api.get('/tm/tasks');
      
      if (response.data && Array.isArray(response.data)) {
        return response.data
          .filter((task: any) => 
            task.title?.includes(query) || 
            task.description?.includes(query)
          )
          .map((task: any) => ({
            id: task.id,
            title: task.title,
            description: task.description,
            customFields: task.customFields
          }));
      }
      
      return [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–¥–∞—á:', error);
      return [];
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Å—ã–ª–∫–∏ –≤ Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  private async loadExistingLinks(): Promise<void> {
    if (this.existingLinksMap !== null) {
      return; // –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    }

    try {
      console.log('üîç –ó–∞–≥—Ä—É–∂–∞—é –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è...');
      const response = await this.api.get('/tm/tasks');
      
      if (!response.data || !response.data.success || !Array.isArray(response.data.tasks)) {
        console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ API');
        this.existingLinksMap = new Map();
        return;
      }

      let tasks = response.data.tasks;
      const projectId = this.config.weeekSpaceOrProjectId;

      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—Ä–æ–µ–∫—Ç, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç—É
      if (projectId) {
        tasks = tasks.filter((task: any) => task.projectId == projectId);
        console.log(`üîç –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç—É ${projectId}, –Ω–∞–π–¥–µ–Ω–æ ${tasks.length} –∑–∞–¥–∞—á`);
      }

      // –°–æ–∑–¥–∞–µ–º Map —Å —Å—Å—ã–ª–∫–∞–º–∏ –∏–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ª—è Link
      this.existingLinksMap = new Map();
      const linkFieldId = '9fafcb38-56c0-491a-9ca5-55b4afc8c8d5'; // ID –ø–æ–ª—è Link

      for (const task of tasks) {
        if (task.customFields && Array.isArray(task.customFields)) {
          const linkField = task.customFields.find((field: any) => field.id === linkFieldId);
          if (linkField && linkField.value) {
            this.existingLinksMap.set(linkField.value, true);
          }
        }
      }

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.existingLinksMap.size} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Å—ã–ª–æ–∫ –≤ Map`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Å—ã–ª–æ–∫:', error);
      this.existingLinksMap = new Map();
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
   */
  async taskExists(fileName: string, sourceUrl: string): Promise<boolean> {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Å—ã–ª–∫–∏ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
      await this.loadExistingLinks();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–∫–∏ –≤ Map
      const exists = this.existingLinksMap!.has(sourceUrl);
      
      if (exists) {
        console.log(`üîç –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–¥–∞—á–∞ –ø–æ —Å—Å—ã–ª–∫–µ: ${sourceUrl}`);
      } else {
        console.log(`üîç –°—Å—ã–ª–∫–∞ ${sourceUrl} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á–∞—Ö`);
      }
      
      return exists;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
      return false;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏ –±–∞—Ç—á–∞–º–∏
   */
  async createTasksBatch(
    tasks: WeeekTaskPayload[], 
    batchSize: number = 20
  ): Promise<{ success: number; failed: number; errors: string[] }> {
    const results = {
      success: 0,
      failed: 0,
      errors: [] as string[]
    };
    
    for (let i = 0; i < tasks.length; i += batchSize) {
      const batch = tasks.slice(i, i + batchSize);
      
      console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –±–∞—Ç—á ${Math.floor(i / batchSize) + 1}/${Math.ceil(tasks.length / batchSize)}`);
      
      for (const task of batch) {
        try {
          await this.createTask(task);
          results.success++;
          
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
          if (this.config.requestDelayMs > 0) {
            await new Promise(resolve => setTimeout(resolve, this.config.requestDelayMs));
          }
        } catch (error) {
          results.failed++;
          const errorMsg = `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ "${task.title}": ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
          results.errors.push(errorMsg);
          console.error(errorMsg);
        }
      }
    }
    
    return results;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –∏–∑ WEEEK
   */
  async getTags(): Promise<any[]> {
    try {
      const response = await this.api.get('/tags');
      console.log('üè∑Ô∏è  –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏ –≤ WEEEK:', response.data);
      return response.data || [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤:', error);
      return [];
    }
  }
} 