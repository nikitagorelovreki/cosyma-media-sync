/**
 * ‚ö†Ô∏è  WEEEK Integration (DEPRECATED)
 * 
 * This is the WEEEK integration entry point, which is deprecated.
 * The main functionality of this application is Google Sheets export.
 * 
 * For new projects, use:
 *   npm run google-docs          # Export to Google Sheets
 *   npm run google-docs:dry-run  # Preview export
 * 
 * WEEEK integration is kept for backward compatibility only.
 */

import dotenv from 'dotenv';
import { ConfigLoader } from './config';
import { MediaSync } from './sync/media-sync';
import { SyncResult } from './types';

async function main() {
  try {
    console.log('üöÄ Media Sync - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ WEEEK');
    console.log('=' .repeat(60));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const args = process.argv.slice(2);
    const isDryRun = args.includes('--dry-run') || args.includes('-d');
    
    if (isDryRun) {
      console.log('üîç –†–µ–∂–∏–º DRY-RUN –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    console.log('üìã –ó–∞–≥—Ä—É–∂–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...');
    const config = ConfigLoader.load();
    ConfigLoader.printConfig(config);
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const mediaSync = new MediaSync(config);
    
    // –ß–∏—Ç–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ stdin –∏–ª–∏ —Ñ–∞–π–ª–∞
    let inputLinks: string[] = [];
    
    if (process.stdin.isTTY) {
      // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
      console.log('\nüìù –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±–ª–∞—á–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É):');
      console.log('–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+D (Unix) –∏–ª–∏ Ctrl+Z (Windows)');
      
      const readline = require('readline');
      const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
      });
      
      inputLinks = await new Promise<string[]>((resolve) => {
        const links: string[] = [];
        rl.on('line', (line: string) => {
          const trimmed = line.trim();
          if (trimmed) {
            links.push(trimmed);
          }
        });
        rl.on('close', () => resolve(links));
      });
      
    } else {
      // –†–µ–∂–∏–º pipe –∏–∑ —Ñ–∞–π–ª–∞
      const fs = require('fs');
      const input = fs.readFileSync(0, 'utf-8');
      // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫ –ò –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
      inputLinks = input
        .split(/[\n\s]+/) // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫ –∏ –ø—Ä–æ–±–µ–ª–∞–º
        .map((line: string) => line.trim())
        .filter((line: string) => line.length > 0);
    }
    
    if (inputLinks.length === 0) {
      console.log('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
      console.log('  npm run dev -- --dry-run                    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å dry-run');
      console.log('  echo "—Å—Å—ã–ª–∫–∞1\\n—Å—Å—ã–ª–∫–∞2" | npm run dev      # –†–µ–∂–∏–º pipe');
      console.log('  npm run dev < links.txt                     # –ß—Ç–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞');
      process.exit(1);
    }
    
    console.log(`\nüîó –ù–∞–π–¥–µ–Ω–æ ${inputLinks.length} —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    const result: SyncResult = await mediaSync.sync(inputLinks, isDryRun);
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:');
    console.log('=' .repeat(40));
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ: ${result.created}`);
    console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${result.skipped}`);
    
    if (result.errors.length > 0) {
      console.log(`‚ùå –û—à–∏–±–∫–∏: ${result.errors.length}`);
      console.log('\n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:');
      result.errors.forEach((error, index) => {
        console.log(`${index + 1}. ${error.url}: ${error.error}`);
      });
    }
    
    if (isDryRun) {
      console.log('\nüí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —É–±–µ—Ä–∏—Ç–µ —Ñ–ª–∞–≥ --dry-run');
    }
    
    console.log('\nüéâ –ì–æ—Ç–æ–≤–æ!');
    
  } catch (error) {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    
    if (error instanceof Error && error.stack) {
      console.error('\n–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:');
      console.error(error.stack);
    }
    
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  console.log('\n\n‚èπÔ∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\n\n‚èπÔ∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
if (require.main === module) {
  main().catch(error => {
    console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
} 