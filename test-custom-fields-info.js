// –¢–µ—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª—è—Ö WEEEK
const axios = require('axios');
require('dotenv').config();

const WEEEK_API_TOKEN = process.env.WEEEK_API_TOKEN;
const PROJECT_ID = process.env.WEEEK_SPACE_OR_PROJECT_ID;

if (!WEEEK_API_TOKEN || !PROJECT_ID) {
  console.error('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã WEEEK_API_TOKEN –∏–ª–∏ WEEEK_SPACE_OR_PROJECT_ID –≤ .env');
  process.exit(1);
}

const weeekApi = axios.create({
  baseURL: 'https://api.weeek.net/public/v1',
  headers: {
    'Authorization': `Bearer ${WEEEK_API_TOKEN}`,
    'Content-Type': 'application/json'
  }
});

async function getCustomFieldsInfo() {
  try {
    console.log('üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª—è—Ö...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
    const response = await weeekApi.get('/custom-fields');
    console.log('üìã –í—Å–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è:', JSON.stringify(response.data, null, 2));
    
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π:', error.response?.data || error.message);
    return null;
  }
}

async function getProjectInfo() {
  try {
    console.log('üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ...');
    
    const response = await weeekApi.get(`/tm/projects/${PROJECT_ID}`);
    console.log('üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:', JSON.stringify(response.data, null, 2));
    
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ:', error.response?.data || error.message);
    return null;
  }
}

async function getTaskInfo(taskId) {
  try {
    console.log(`üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ ${taskId}...`);
    
    const response = await weeekApi.get(`/tm/tasks/${taskId}`);
    console.log('üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ:', JSON.stringify(response.data, null, 2));
    
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ:', error.response?.data || error.message);
    return null;
  }
}

async function testUpdateTask(taskId) {
  try {
    console.log(`üîß –ü—Ä–æ–±—É—é –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É ${taskId}...`);
    
    // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É
    const updatePayload = {
      customFields: [
        { id: '9faeb00e-bce5-4ccb-accf-d2af3bff65da', value: '–§–æ—Ç–æ' },
        { id: '9faeb02c-4521-480f-aeaf-54e2a234b2ae', value: 'https://example.com/update' },
        { id: '9faeb096-8a8d-401c-95c9-0a38e6c87a80', value: '2024-04-24' }
      ]
    };
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', JSON.stringify(updatePayload, null, 2));
    
    const response = await weeekApi.put(`/tm/tasks/${taskId}`, updatePayload);
    console.log('‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', JSON.stringify(response.data, null, 2));
    
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error.response?.data || error.message);
    return null;
  }
}

async function runInfoTests() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π WEEEK');
  console.log('üìÅ –ü—Ä–æ–µ–∫—Ç ID:', PROJECT_ID);
  console.log('üîë API —Ç–æ–∫–µ–Ω:', WEEEK_API_TOKEN.substring(0, 10) + '...');
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª—è—Ö
  const customFields = await getCustomFieldsInfo();
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
  const projectInfo = await getProjectInfo();
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ
  const lastTaskId = 406; // –ò–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
  const taskInfo = await getTaskInfo(lastTaskId);
  
  // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É
  const updateResult = await testUpdateTask(lastTaskId);
  
  console.log('\nüìä –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù');
  console.log('=' .repeat(50));
  
  if (customFields) {
    console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª—è—Ö –ø–æ–ª—É—á–µ–Ω–∞');
  }
  
  if (projectInfo) {
    console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞');
  }
  
  if (taskInfo) {
    console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ –ø–æ–ª—É—á–µ–Ω–∞');
  }
  
  if (updateResult) {
    console.log('‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runInfoTests().catch(console.error); 